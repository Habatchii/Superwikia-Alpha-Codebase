<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PerByte.Core</name>
    </assembly>
    <members>
        <member name="T:PerByte.Core.ArrayExtensions">
            <summary>
            Extension methods for an <see cref="T:System.Array"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.ArrayExtensions.IsNullOrEmpty(System.Array)">
            <summary>
            Indicates whether the specified <see cref="T:System.Array"/> is null or has a zero length.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to check.</param>
            <returns><b>True</b> if the <see cref="T:System.Array"/> is null or has a zero length; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:PerByte.Core.ArrayExtensions.ToHexString(System.Byte[])">
            <summary>
            Converts the given byte array to pure hex digits. { 0, 255 } becomes <code>00ff</code>.
            </summary>
            <param name="array">The byte array to convert to hex.</param>
            <returns>The hex string representation of the byte array.</returns>
        </member>
        <member name="M:PerByte.Core.ArrayExtensions.ChangeType``2(``0[])">
            <summary>
            Changes the underlying type of the array by converting each value.
            </summary>
            <typeparam name="TFrom">The type of the source array.</typeparam>
            <typeparam name="TTo">The type of the destination array.</typeparam>
            <param name="array">The array to convert.</param>
            <returns>A new array of type {TFrom}.</returns>
        </member>
        <member name="M:PerByte.Core.ArrayExtensions.ChangeType``2(``0[],System.IFormatProvider)">
            <summary>
            Changes the underlying type of the array by converting each value.
            </summary>
            <typeparam name="TFrom">The type of the source array.</typeparam>
            <typeparam name="TTo">The type of the destination array.</typeparam>
            <param name="array">The array to convert.</param>
            <param name="provider">The format provider used for conversion.</param>
            <returns>A new array of type {TFrom}.</returns>
        </member>
        <member name="M:PerByte.Core.ArrayExtensions.Combine``1(``0[][])">
            <summary>
            Combines a series of arrays of the same type into a single array.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the array.</typeparam>
            <param name="arrays">The arrays to combine.</param>
            <returns>A single array of type T, with all of the contents of the arrays.</returns>
        </member>
        <member name="T:PerByte.Core.DataEventHandler`1">
            <summary>
            Represents the method of an event that has a piece of data.
            </summary>
            <typeparam name="TData">The type of the data attached to the event.</typeparam>
            <param name="sender">The source of the event.</param>
            <param name="e">The event arguments with attached data.</param>
        </member>
        <member name="T:PerByte.Core.DataEventArgs`1">
            <summary>
            Represents an EventArgs that has a piece of data attached to it.
            </summary>
            <typeparam name="TData">The type of the data attached to the event.</typeparam>
        </member>
        <member name="M:PerByte.Core.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:PerByte.Core.DataEventArgs`1"/> class.
            </summary>
            <param name="data">The data to store with the EventArgs.</param>
            <exception cref="T:System.ArgumentNullException">If <em>data</em> is null.</exception>
        </member>
        <member name="P:PerByte.Core.DataEventArgs`1.Data">
            <summary>
            Gets the data associated with this EventArgs
            </summary>
        </member>
        <member name="T:PerByte.Core.Data.PocoReader`1">
            <summary>
            A lightweight SQL to LINQ style wrapper on <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <typeparam name="T">The type of the POCO.</typeparam>
        </member>
        <member name="F:PerByte.Core.Data.PocoReader`1.dataReader">
            <summary>
            Local storage of the data reader.
            </summary>
        </member>
        <member name="F:PerByte.Core.Data.PocoReader`1.convertFunc">
            <summary>
            Local storage for the translation function between the SQL and the POCO.
            </summary>
        </member>
        <member name="F:PerByte.Core.Data.PocoReader`1.closeReader">
            <summary>
            Local storage for whether we should close the reader when fully enumerated.
            </summary>
        </member>
        <member name="M:PerByte.Core.Data.PocoReader`1.#ctor(System.Data.IDataReader,System.Func{System.Data.IDataRecord,`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PerByte.Core.Data.PocoReader`1"/> class.
            </summary>
            <param name="dataReader">The data reader to retrieve the data from and iterate over.</param>
            <param name="convertFunc">The translation object to convert from the SQL to the POCO.</param>
            <param name="closeReader">A value indicating whether or not to close the reader when the enumeration is exhausted.</param>
        </member>
        <member name="M:PerByte.Core.Data.PocoReader`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the reader.
            </summary>
            <returns>An enumerator for the reader.</returns>
        </member>
        <member name="M:PerByte.Core.Data.PocoReader`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the reader.
            </summary>
            <returns>An enumerator for the reader.</returns>
        </member>
        <member name="T:PerByte.Core.Collections.DictionaryExtensions">
            <summary>
            Extension methods for an <see cref="T:System.Collections.Generic.IDictionary`2"/> or <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Collections.DictionaryExtensions.ToNameValueCollection``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Converts the pair to a <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <typeparam name="TKey">The <see cref="T:System.Type"/> of the key.</typeparam>
            <typeparam name="TValue">The <see cref="T:System.Type"/> of the value.</typeparam>
            <param name="dictionary">The dictionary to convert.</param>
            <returns>A new <see cref="T:System.Collections.Specialized.NameValueCollection"/> with all of the items of dictionary added.</returns>
        </member>
        <member name="M:PerByte.Core.Collections.DictionaryExtensions.ToNameValueCollection(System.Collections.IDictionary)">
            <summary>
            Converts the <see cref="T:System.Collections.IDictionary"/> to a <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="dictionary">The dictionary to convert.</param>
            <returns>A new <see cref="T:System.Collections.Specialized.NameValueCollection"/> with all of the items of dictionary added.</returns>
        </member>
        <member name="M:PerByte.Core.Collections.DictionaryExtensions.GetValue``1(System.Collections.IDictionary,System.String,``0)">
            <summary>
            Gets a strongly typed value from the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <typeparam name="T">The return <see cref="T:System.Type"/>.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The value to return if not found in the dictionary.</param>
            <returns>The value in the dictionary or <b>defaultValue</b> if not found.</returns>
        </member>
        <member name="M:PerByte.Core.Collections.DictionaryExtensions.GetNullableValue``1(System.Collections.IDictionary,System.String)">
            <summary>
            Gets a strongly typed value from the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <typeparam name="T">The return <see cref="T:System.Type"/>.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key.</param>
            <returns>The value in the dictionary or <b>defaultValue</b> if not found.</returns>
        </member>
        <member name="T:PerByte.Core.Drawing.ImageExtensions">
            <summary>
            Utility and extension class for <see cref="T:System.Drawing.Image"/> objects.
            </summary>
        </member>
        <member name="M:PerByte.Core.Drawing.ImageExtensions.FromByteArray(System.Byte[])">
            <summary>
            Converts the specified byte array to an image.
            </summary>
            <param name="buffer">The byte array representation of the image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> that was loaded from the byte array.</returns>
        </member>
        <member name="M:PerByte.Core.Drawing.ImageExtensions.Resize(System.Drawing.Image,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes an image, maintaining width:height ratios.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> that you wish to resize.</param>
            <param name="width">The desired width of the resulting image.</param>
            <param name="height">The desired height of the resulting image.</param>
            <param name="pad">Whether the image should pad the borders to keep width/height.</param>
            <returns>The resulting resized <see cref="T:System.Drawing.Image"/> object.</returns>
        </member>
        <member name="M:PerByte.Core.Drawing.ImageExtensions.ToByteArray(System.Drawing.Image)">
            <summary>
            Converts the specified image to a byte array using format specified by the image.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to convert.</param>
            <returns>The byte array representation of the image.</returns>
        </member>
        <member name="M:PerByte.Core.Drawing.ImageExtensions.ToByteArray(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts the specified image to a byte array using the specified format.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to convert.</param>
            <param name="format">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> to use when serializing.</param>
            <returns>The byte array representation of the image.</returns>
        </member>
        <member name="M:PerByte.Core.Drawing.ImageExtensions.ToAlphaBlend(System.Drawing.Image,System.Int32,System.Drawing.Color)">
            <summary>
            Alpha blends an image with a background color;
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to alpha blend.</param>
            <param name="alpha">The alpha value to use when blending.</param>
            <param name="backgroundColor">The background color to blend with.</param>
            <returns>A new <see cref="T:System.Drawing.Image"/> with the alpha blended image.</returns>
        </member>
        <member name="M:PerByte.Core.Drawing.ImageExtensions.ToGrayscale(System.Drawing.Image)">
            <summary>
            Grayscales an image.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> that you wish to grayscale.</param>
            <returns>A new <see cref="T:System.Drawing.Image"/> instance that represents the grayscale image.</returns>
        </member>
        <member name="T:PerByte.Core.Ensure">
            <summary>
            Utility class to simplify run time assertions.
            </summary>
        </member>
        <member name="M:PerByte.Core.Ensure.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Determines if the argument is null and if so throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The argument value to check.</param>
            <param name="parameterName">The name of the argument for inclusion in the exception.</param>
        </member>
        <member name="M:PerByte.Core.Ensure.ArgumentNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Determines if the argument is null and if so throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The argument value to check.</param>
            <param name="parameterName">The name of the argument for inclusion in the exception.</param>
        </member>
        <member name="M:PerByte.Core.Ensure.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Determines if the argument is null or empty and if so throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="value">The argument value to check.</param>
            <param name="parameterName">The name of the argument for inclusion in the exception.</param>
        </member>
        <member name="M:PerByte.Core.Ensure.ArgumentGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Determines if the argument is within range of the specified values. If not throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="value">The argument value to check.</param>
            <param name="minimumValue">The minimum accepted value.</param>
            <param name="parameterName">The name of the argument for inclusion in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <b>value</b> is not greater than <b>minimumValue</b>.</exception>
        </member>
        <member name="M:PerByte.Core.Ensure.ArgumentGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Determines if the argument is within range of the specified values. If not throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="value">The argument value to check.</param>
            <param name="minimumValue">The minimum accepted value.</param>
            <param name="parameterName">The name of the argument for inclusion in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <b>value</b> is not greater than <b>minimumValue</b>.</exception>
        </member>
        <member name="M:PerByte.Core.Ensure.IsEnumType(System.Type)">
            <summary>
            Checks the given type to determine if it is an enumeration type. If not throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="type">The type to check.</param>
        </member>
        <member name="M:PerByte.Core.Ensure.IsEnumType``1">
            <summary>
            Checks the given type to determine if it is an enumeration type. If not throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
        </member>
        <member name="T:PerByte.Core.Data.DataRowExtensions">
            <summary>
            Extension methods for a <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBoolean(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBoolean(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBoolean(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBoolean(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBoolean(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBoolean(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBoolean(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBoolean(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBoolean(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBoolean(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBoolean(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBoolean(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetByte(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetByte(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetByte(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetByte(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetByte(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetByte(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableByte(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableByte(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableByte(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableByte(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableByte(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableByte(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBytes(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBytes(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBytes(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBytes(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBytes(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetBytes(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBytes(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBytes(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBytes(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBytes(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBytes(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableBytes(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChar(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChar(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChar(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChar(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChar(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChar(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChar(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChar(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChar(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChar(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChar(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChar(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChars(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChars(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChars(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChars(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChars(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetChars(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChars(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChars(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChars(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChars(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChars(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableChars(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> array or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDateTime(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDateTime(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDateTime(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDateTime(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDateTime(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDateTime(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDateTime(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDateTime(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDateTime(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDateTime(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDateTime(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDateTime(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDecimal(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDecimal(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDecimal(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDecimal(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDecimal(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDecimal(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDecimal(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDecimal(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDecimal(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDecimal(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDecimal(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDecimal(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDouble(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDouble(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDouble(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDouble(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDouble(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetDouble(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDouble(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDouble(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDouble(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDouble(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDouble(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableDouble(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetGuid(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetGuid(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetGuid(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetGuid(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetGuid(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetGuid(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableGuid(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableGuid(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableGuid(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableGuid(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableGuid(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableGuid(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt16(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt16(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt16(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt16(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt16(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt16(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt16(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt16(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt16(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt16(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt16(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt16(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt32(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt32(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt32(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt32(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt32(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt32(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt32(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt32(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt32(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt32(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt32(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt32(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt64(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt64(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt64(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt64(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt64(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetInt64(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt64(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt64(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt64(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt64(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt64(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableInt64(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetSingle(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetSingle(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetSingle(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetSingle(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetSingle(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetSingle(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableSingle(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableSingle(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableSingle(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableSingle(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableSingle(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableSingle(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetString(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetString(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetString(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetString(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetString(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetString(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>.
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableString(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableString(System.Data.DataRow,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableString(System.Data.DataRow,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableString(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableString(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
            <summary>
            {
            Gets the value of the specified column as a <see cref="T:System.String"/> or null if the value is <see cref="T:System.DBNull"/>..
            }
            </summary>
            {
            <param name="row">The row to retrieve the value from.</param>
            }
            <param name="columnIndex">The zero-based index of the column.</param>
            {
            <param name="version">The version of the row you want.</param>
            }
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataRowExtensions.GetNullableString(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/> or null if the value is <see cref="T:System.DBNull"/>..
            </summary>
            <param name="row">The row to retrieve the value from.</param>
            <param name="columnName">The name of the column to retrieve.</param>
            <param name="version">The version of the row you want.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="T:PerByte.Core.Data.DataTableExtensions">
            <summary>
            Extension methods for a <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.Compute``1(System.Data.DataTable,System.String,System.String)">
            <summary>
            Strongly typed version of the Compute method.
            </summary>
            <typeparam name="T">The type of the value that should be returned.</typeparam>
            <param name="table">The table to compute the value on.</param>
            <param name="expression">The expression to compute.</param>
            <param name="filter">The filter to limit the rows that evaluate in the expression.</param>
            <returns>The strongly typed value or null.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.ReadFixed(System.Data.DataTable,System.String,System.Int32[],System.Boolean)">
            <summary>
            Reads fixed width data into the <see cref="T:System.Data.DataTable"/> using the specified file name.
            </summary>
            <param name="table">The table to read the data into.</param>
            <param name="fileName">The name of the file from which to read the data.</param>
            <param name="widths">The widths of the columns.</param>
            <param name="hasHeader">Whether the delimiter has a header row.</param>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.ReadFixed(System.Data.DataTable,System.IO.Stream,System.Int32[],System.Boolean)">
            <summary>
            Reads fixed width data into the <see cref="T:System.Data.DataTable"/> using the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="table">The table to read the data into.</param>
            <param name="stream">The stream from which to read the data.</param>
            <param name="widths">The widths of the columns.</param>
            <param name="hasHeader">Whether the delimiter has a header row.</param>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.ReadFixed(System.Data.DataTable,System.IO.TextReader,System.Int32[],System.Boolean)">
            <summary>
            Reads fixed width data into the <see cref="T:System.Data.DataTable"/> using the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="table">The table to read the data into.</param>
            <param name="reader">The reader from which to read the data.</param>
            <param name="widths">The widths of the columns.</param>
            <param name="hasHeader">Whether the delimiter has a header row.</param>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.ReadDelimited(System.Data.DataTable,System.String,System.Char,System.Boolean)">
            <summary>
            Reads delimited data into the <see cref="T:System.Data.DataTable"/> using the specified file name.
            </summary>
            <param name="table">The table to read the data into.</param>
            <param name="fileName">The name of the file from which to read the data.</param>
            <param name="columnDelimiter">The delimiter that separates columns.</param>
            <param name="hasHeader">Whether the delimiter has a header row.</param>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.ReadDelimited(System.Data.DataTable,System.IO.Stream,System.Char,System.Boolean)">
            <summary>
            Reads delimited data into the <see cref="T:System.Data.DataTable"/> using the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="table">The table to read the data into.</param>
            <param name="stream">The stream from which to read the data.</param>
            <param name="columnDelimiter">The delimiter that separates columns.</param>
            <param name="hasHeader">Whether the delimiter has a header row.</param>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.ReadDelimited(System.Data.DataTable,System.IO.TextReader,System.Char,System.Boolean)">
            <summary>
            Reads delimited data into the <see cref="T:System.Data.DataTable"/> using the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="table">The table to read the data into.</param>
            <param name="reader">The reader from which to read the data.</param>
            <param name="columnDelimiter">The delimiter that separates columns.</param>
            <param name="hasHeader">Whether the delimiter has a header row.</param>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.WriteDelimited(System.Data.DataTable,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Data.DataTable"/> to a delimited file using the specified file name.
            </summary>
            <param name="table">The table that contains the data to write.</param>
            <param name="fileName">The name of the file where the data should be written.</param>
            <param name="columnDelimiter">The delimiter to use between columns.</param>
            <param name="rowDelimiter">The delimiter to use between rows.</param>
            <param name="hasHeader">Whether the output should have a header row.</param>
            <param name="alwaysQuoteField">Whether the fields should be always quote or only if needed.</param>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.WriteDelimited(System.Data.DataTable,System.IO.Stream,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Data.DataTable"/> to a delimited file using the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="table">The table that contains the data to write.</param>
            <param name="stream">The stream where the data should be written.</param>
            <param name="columnDelimiter">The delimiter to use between columns.</param>
            <param name="rowDelimiter">The delimiter to use between rows.</param>
            <param name="hasHeader">Whether the output should have a header row.</param>
            <param name="alwaysQuoteField">Whether the fields should be always quote or only if needed.</param>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.WriteDelimited(System.Data.DataTable,System.IO.TextWriter,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Data.DataTable"/> to a delimited file using the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="table">The table that contains the data to write.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> where the data should be written.</param>
            <param name="columnDelimiter">The delimiter to use between columns.</param>
            <param name="rowDelimiter">The delimiter to use between rows.</param>
            <param name="hasHeader">Whether the output should have a header row.</param>
            <param name="alwaysQuoteField">Whether the fields should be always quote or only if needed.</param>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.SplitParts(System.String,System.Char)">
            <summary>
            Splits the line into its parts as separated by the delimiter.
            </summary>
            <param name="line">The line to split.</param>
            <param name="delimeter">The delimiter between parts.</param>
            <returns>The line split into parts.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.SplitParts(System.String,System.Int32[])">
            <summary>
            Splits the line into its parts as separated by the widths.
            </summary>
            <param name="line">The line to split.</param>
            <param name="widths">The widths of the columns.</param>
            <returns>The line split into parts.</returns>
        </member>
        <member name="M:PerByte.Core.Data.DataTableExtensions.QuoteText(System.Object,System.String,System.Boolean)">
            <summary>
            Called to quote text so the output is well formatted.
            </summary>
            <param name="value">The value to quote.</param>
            <param name="delimiter">The delimiter to check for when determining whether to quote the text.</param>
            <param name="alwaysQuoteField">Whether the fields should be always quote or only if needed.</param>
            <returns>The quoted text.</returns>
        </member>
        <member name="T:PerByte.Core.Data.IDataParameterExtensions">
            <summary>
            Extension methods for <see cref="T:System.Data.IDataParameter"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Data.IDataParameterExtensions.Fix(System.Data.IDataParameter)">
            <summary>
            Fixes an <see cref="T:System.Data.IDataParameter"/> by setting a null value to <see cref="F:System.DBNull.Value"/>.
            </summary>
            <param name="parameter">The <see cref="T:System.Data.IDataParameter"/> to fix.</param>
            <returns>The passed in parameter after it has been fixed.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataParameterExtensions.Fix(System.Data.IDataParameter,System.Boolean)">
            <summary>
            Fixes an <see cref="T:System.Data.IDataParameter"/> by setting a null value to <see cref="F:System.DBNull.Value"/>.
            </summary>
            <param name="parameter">The <see cref="T:System.Data.IDataParameter"/> to fix.</param>
            <param name="treatEmptyStringAsNull">Treat null and empty string the same.</param>
            <returns>The passed in parameter after it has been fixed.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataParameterExtensions.Fix(System.Data.IDataParameter[])">
            <summary>
            Fixes an array of <see cref="T:System.Data.IDataParameter"/> by setting null values to <see cref="F:System.DBNull.Value"/>.
            </summary>
            <param name="parameters">The array of <see cref="T:System.Data.IDataParameter"/> to fix.</param>
            <returns>The passed in array after it has been fixed.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataParameterExtensions.Fix(System.Data.IDataParameter[],System.Boolean)">
            <summary>
            Fixes an array of <see cref="T:System.Data.IDataParameter"/> by setting null values to <see cref="F:System.DBNull.Value"/>.
            </summary>
            <param name="parameters">The array of <see cref="T:System.Data.IDataParameter"/> to fix.</param>
            <param name="treatEmptyStringAsNull">Treat null and empty string the same.</param>
            <returns>The passed in array after it has been fixed.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataParameterExtensions.Fix(System.Data.IDataParameterCollection)">
            <summary>
            Fixes a collection of <see cref="T:System.Data.IDataParameter"/> by setting null values to <see cref="F:System.DBNull.Value"/>.
            </summary>
            <param name="parameters">The collection of <see cref="T:System.Data.IDataParameter"/> to fix.</param>
            <returns>The passed in collection after it has been fixed.</returns>
        </member>
        <member name="T:PerByte.Core.Data.IDataReaderExtensions">
            <summary>
            Extension methods for an <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableBoolean(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetByte(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableByte(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableByte(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetBytes(System.Data.IDataRecord,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer offset.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <param name="fieldOffset">The index within the field from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferOffset">The index for <em>buffer</em> to begin the write operation.</param>
            <param name="length">The maximum length to copy into the buffer.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetAllBytes(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetAllBytes(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableBytes(System.Data.IDataRecord,System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer offset.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the field from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferOffset">The index for <em>buffer</em> to begin the write operation.</param>
            <param name="length">The maximum length to copy into the buffer.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableBytes(System.Data.IDataRecord,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer offset.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <param name="fieldOffset">The index within the field from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferOffset">The index for <em>buffer</em> to begin the write operation.</param>
            <param name="length">The maximum length to copy into the buffer.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableAllBytes(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableAllBytes(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/> array or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetChar(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableChar(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableChar(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetChars(System.Data.IDataRecord,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of chars from the specified column offset into the buffer an array starting at the given buffer offset.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <param name="fieldOffset">The index within the field from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of chars.</param>
            <param name="bufferOffset">The index for <em>buffer</em> to begin the write operation.</param>
            <param name="length">The maximum length to copy into the buffer.</param>
            <returns>The actual number of chars read.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableChars(System.Data.IDataRecord,System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of chars from the specified column offset into the buffer an array starting at the given buffer offset.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the field from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of chars.</param>
            <param name="bufferOffset">The index for <em>buffer</em> to begin the write operation.</param>
            <param name="length">The maximum length to copy into the buffer.</param>
            <returns>The actual number of chars read.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableChars(System.Data.IDataRecord,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of chars from the specified column offset into the buffer an array starting at the given buffer offset.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <param name="fieldOffset">The index within the field from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of chars.</param>
            <param name="bufferOffset">The index for <em>buffer</em> to begin the write operation.</param>
            <param name="length">The maximum length to copy into the buffer.</param>
            <returns>The actual number of chars read.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetData(System.Data.IDataRecord,System.String)">
            <summary>
            Gets an <see cref="T:System.Data.IDataReader"/> to be used when the field points to more remote structured data.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> to be used when the field points to more remote structured data.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetDataTypeName(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the name of the source data type.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The name of the back-end data type.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableDateTime(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetDecimal(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableDecimal(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableDecimal(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableDouble(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetFieldType(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> that is the data type of the object.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The <see cref="T:System.Type"/> that is the data type of the object.  If the type does not exist on the client, in the case of a User-Defined Type (UDT) returned from the database, returns null.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetFloat(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableFloat(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableFloat(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetGuid(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableGuid(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableGuid(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableInt16(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableInt32(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableInt64(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetString(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableString(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableString(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/> or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetValue(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column in its native format.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableValue(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column in its native format or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.GetNullableValue(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column in its native format or null of it the value is <see cref="T:System.DBNull"/>.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDataReaderExtensions.IsDBNull(System.Data.IDataRecord,System.String)">
            <summary>
            Gets a value that indicates whether the column contains non-existent or missing values.
            </summary>
            <param name="reader">The reader to retrieve the value from.</param>
            <param name="name">The name of the field to find.</param>
            <returns><b>True</b> if the specified column value is equivalent to <see cref="T:System.DBNull"/>; otherwise false.</returns>
        </member>
        <member name="T:PerByte.Core.Data.IDbConnectionExtensions">
            <summary>
            Extension methods for an <see cref="T:System.Data.IDbConnection"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.String)">
            <summary>
            Creates and returns a <see cref="T:System.Data.IDbCommand"/> object associated with the connection.
            </summary>
            <param name="connection">The connection to associate the command to.</param>
            <param name="commandText">The text of the command.</param>
            <returns>An <see cref="T:System.Data.IDbCommand"/> object associated with the connection.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.String,System.Data.CommandType)">
            <summary>
            Creates and returns a <see cref="T:System.Data.IDbCommand"/> object associated with the connection.
            </summary>
            <param name="connection">The connection to associate the command to.</param>
            <param name="commandText">The text of the command.</param>
            <param name="commandType">The type of the command.</param>
            <returns>An <see cref="T:System.Data.IDbCommand"/> object associated with the connection.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecuteCommandNonQuery(System.Data.IDbConnection,System.String)">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection.
            </summary>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecuteCommandNonQuery(System.Data.IDbConnection,System.String,System.Data.CommandType)">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection.
            </summary>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <param name="commandType">The type of the command to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecuteReader(System.Data.IDbConnection,System.String)">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a reader.
            </summary>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandBehavior)">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a reader.
            </summary>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <param name="behavior">The behavior of the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandType)">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a reader.
            </summary>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <param name="commandType">The type of the command to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.CommandBehavior)">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a reader.
            </summary>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <param name="commandType">The type of the command to execute.</param>
            <param name="behavior">The behavior of the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecuteReader(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a reader.
            </summary>
            <param name="connection">The connection to execute the command against.</param>
            <param name="command">The text of the command to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecuteReader(System.Data.IDbConnection,System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a reader.
            </summary>
            <param name="connection">The connection to execute the command against.</param>
            <param name="command">The text of the command to execute.</param>
            <param name="behavior">The behavior of the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecutePocoReader``1(System.Data.IDbConnection,System.String,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a POCO reader.
            </summary>
            <typeparam name="T">The type of the POCO.</typeparam>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <param name="convertFunc">The translation object to convert from the SQL to the POCO.</param>
            <returns>The POCO reader.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecutePocoReader``1(System.Data.IDbConnection,System.String,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a POCO reader.
            </summary>
            <typeparam name="T">The type of the POCO.</typeparam>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <param name="behavior">The behavior of the command.</param>
            <param name="convertFunc">The translation object to convert from the SQL to the POCO.</param>
            <returns>The POCO reader.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecutePocoReader``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a POCO reader.
            </summary>
            <typeparam name="T">The type of the POCO.</typeparam>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <param name="commandType">The type of the command to execute.</param>
            <param name="convertFunc">The translation object to convert from the SQL to the POCO.</param>
            <returns>The POCO reader.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecutePocoReader``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a POCO reader.
            </summary>
            <typeparam name="T">The type of the POCO.</typeparam>
            <param name="connection">The connection to execute the command against.</param>
            <param name="commandText">The text of the command to execute.</param>
            <param name="commandType">The type of the command to execute.</param>
            <param name="behavior">The behavior of the command.</param>
            <param name="convertFunc">The translation object to convert from the SQL to the POCO.</param>
            <returns>The POCO reader.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecutePocoReader``1(System.Data.IDbConnection,System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a POCO reader.
            </summary>
            <typeparam name="T">The type of the POCO.</typeparam>
            <param name="connection">The connection to execute the command against.</param>
            <param name="command">The command to execute.</param>
            <param name="convertFunc">The translation object to convert from the SQL to the POCO.</param>
            <returns>The POCO reader.</returns>
        </member>
        <member name="M:PerByte.Core.Data.IDbConnectionExtensions.ExecutePocoReader``1(System.Data.IDbConnection,System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Creates an appropriate <see cref="T:System.Data.IDbCommand"/> and executes a statement against the connection returning a POCO reader.
            </summary>
            <typeparam name="T">The type of the POCO.</typeparam>
            <param name="connection">The connection to execute the command against.</param>
            <param name="command">The command to execute.</param>
            <param name="behavior">The behavior of the command.</param>
            <param name="convertFunc">The translation object to convert from the SQL to the POCO.</param>
            <returns>The POCO reader.</returns>
        </member>
        <member name="T:PerByte.Core.ValidatedNotNullAttribute">
            <summary>
            Indicates that the argument is validated against null.
            </summary>
        </member>
        <member name="T:PerByte.Core.FuncEqualityComparer`1">
            <summary>
            Performs type-specific equality comparisons using the supplied functions.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the object being compared.</typeparam>
        </member>
        <member name="F:PerByte.Core.FuncEqualityComparer`1.comparer">
            <summary>
            Local storage for the supplied equality comparison.
            </summary>
        </member>
        <member name="F:PerByte.Core.FuncEqualityComparer`1.hash">
            <summary>
            Local storage for the supplied hash function.
            </summary>
        </member>
        <member name="M:PerByte.Core.FuncEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:PerByte.Core.FuncEqualityComparer`1"/> class.
            </summary>
            <param name="comparer">A function that will return true if two objects are equal.</param>
        </member>
        <member name="M:PerByte.Core.FuncEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:PerByte.Core.FuncEqualityComparer`1"/> class.
            </summary>
            <param name="comparer">A function that will return true if two objects are equal.</param>
            <param name="hash">A function that will return a valid hash for the object.</param>
        </member>
        <member name="M:PerByte.Core.FuncEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines if the provided objects are equal using the supplied comparison function.
            </summary>
            <param name="x">The left object to compare.</param>
            <param name="y">The right object to compare.</param>
            <returns>true if equal; false otherwise.</returns>
        </member>
        <member name="M:PerByte.Core.FuncEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Gets the hash value for the object.
            </summary>
            <param name="obj">The object to calculate the hash for.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:PerByte.Core.IEnumerableExtensions">
            <summary>
            Extension methods for an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.IEnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Filters an enumeration of values excluding a specific item using the default equality comparer to compare values.
            </summary>
            <typeparam name="TSource">The Type of the elements of the source.</typeparam>
            <param name="source">The enumeration.</param>
            <param name="item">The item to exclude from the list.</param>
            <returns>The enumeration after the filter.</returns>
        </member>
        <member name="M:PerByte.Core.IEnumerableExtensions.ExceptNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a sequence of values by excluding null items.
            </summary>
            <typeparam name="TSource">The Type of the elements of the source.</typeparam>
            <param name="source">The enumeration.</param>
            <returns>The enumeration after the filter.</returns>
        </member>
        <member name="M:PerByte.Core.IEnumerableExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Formats the array as a string, each element delimited by a separator.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the array.</typeparam>
            <param name="list">The list to format.</param>
            <param name="delimiter">The delimiting string to use.</param>
            <returns>The array, formatted as as string, each element delimited by a separator.</returns>
        </member>
        <member name="M:PerByte.Core.IEnumerableExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Formats the array as a string, each element delimited by a separator.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the array.</typeparam>
            <param name="list">The list to format.</param>
            <param name="format">A composite format string for each element of the array.</param>
            <param name="delimiter">The delimiting string to use.</param>
            <returns>The array, formatted as as string, each element delimited by a separator.</returns>
        </member>
        <member name="M:PerByte.Core.IEnumerableExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.IFormatProvider,System.String)">
            <summary>
            Formats the array as a string, each element delimited by a separator.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the array.</typeparam>
            <param name="list">The list to format.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="delimiter">The delimiting string to use.</param>
            <returns>The array, formatted as as string, each element delimited by a separator.</returns>
        </member>
        <member name="M:PerByte.Core.IEnumerableExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.IFormatProvider,System.String,System.String)">
            <summary>
            Formats the array as a string, each element delimited by a separator.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the array.</typeparam>
            <param name="list">The list to format.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string for each element of the array.</param>
            <param name="delimiter">The delimiting string to use.</param>
            <returns>The array, formatted as as string, each element delimited by a separator.</returns>
        </member>
        <member name="T:PerByte.Core.IO.PathString">
            <summary>
            Simple wrapper class for dealing with file based path strings.
            </summary>
        </member>
        <member name="T:PerByte.Core.StringEquivalent`1">
            <summary>
            A base class for types that are specialized strings.
            </summary>
            <typeparam name="T">The child implementation.</typeparam>
        </member>
        <member name="F:PerByte.Core.StringEquivalent`1.value">
            <summary>
            Local storage for the string value.
            </summary>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PerByte.Core.StringEquivalent`1"/> class with the specified value.
            </summary>
            <param name="value">The string value that is represented.</param>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.op_Addition(PerByte.Core.StringEquivalent{`0},System.String)">
            <summary>
            Append the right string to the left and return the combined result.
            </summary>
            <param name="left">The string to be appended to.</param>
            <param name="right">The string to append.</param>
            <returns>A new instance that is the result of the append.</returns>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.op_Equality(PerByte.Core.StringEquivalent{`0},PerByte.Core.StringEquivalent{`0})">
            <summary>
            Determine if the strings are equivalent.
            </summary>
            <param name="left">The first string.</param>
            <param name="right">The second string.</param>
            <returns>true if equivalent; false otherwise.</returns>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.op_Inequality(PerByte.Core.StringEquivalent{`0},PerByte.Core.StringEquivalent{`0})">
            <summary>
            Determine if the strings are not equivalent.
            </summary>
            <param name="left">The first string.</param>
            <param name="right">The second string.</param>
            <returns>true if not equivalent; false otherwise.</returns>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.Combine(System.String)">
            <summary>
            Appends the specified string to this instance.
            </summary>
            <param name="addition">The string to append.</param>
            <returns>A new instance that is the result of the append.</returns>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.Equals(System.Object)">
            <summary>
            Determine if the specified object is equivalent to this instance.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>true if equivalent; false otherwise.</returns>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.Equals(`0)">
            <summary>
            Determine if the specified string is equivalent to this instance.
            </summary>
            <param name="stringEquivalent">The string to compare to.</param>
            <returns>true if equivalent; false otherwise.</returns>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.Equals(System.String)">
            <summary>
            Determine if the specified string is equivalent to this instance.
            </summary>
            <param name="other">THe string to compare to.</param>
            <returns>true if equivalent, false otherwise.</returns>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.GetHashCode">
            <summary>
            Returns the hash code for this string.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:PerByte.Core.StringEquivalent`1.ToString">
            <summary>
            Returns the string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="P:PerByte.Core.StringEquivalent`1.Value">
            <summary>
            Gets the internal string value.
            </summary>
        </member>
        <member name="M:PerByte.Core.IO.PathString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PerByte.Core.IO.PathString"/> class.
            </summary>
            <param name="path">The path to wrap.</param>
        </member>
        <member name="M:PerByte.Core.IO.PathString.op_Implicit(System.String)~PerByte.Core.IO.PathString">
            <summary>
            Implicit conversion from a string.
            </summary>
            <param name="value">The string to convert from.</param>
            <returns>A new instance representing the path.</returns>
        </member>
        <member name="M:PerByte.Core.IO.PathString.op_Implicit(PerByte.Core.IO.PathString)~System.String">
            <summary>
            Implicit conversion to a string.
            </summary>
            <param name="path">The path string to convert from.</param>
            <returns>The path as a string.</returns>
        </member>
        <member name="M:PerByte.Core.IO.PathString.Combine(System.String)">
            <summary>
            Combines the specified path with this instance.
            </summary>
            <param name="path">The path to combine.</param>
            <returns>A new instance with the combined paths.</returns>
        </member>
        <member name="M:PerByte.Core.IO.PathString.Normalize(System.String)">
            <summary>
            Normalizes the directory separator characters.
            </summary>
            <param name="valueToNormalize">The path to normalize.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="T:PerByte.Core.IO.StreamExtensions">
            <summary>
            Extension methods for an <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.IO.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads the entire stream as a byte array.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:PerByte.Core.IO.StreamExtensions.ReadToEnd(System.IO.Stream,System.Int32)">
            <summary>
            Reads the entire stream as a byte array.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read.</param>
            <param name="bufferSize">The buffer size to use while reading. Defaults to 16KB.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:PerByte.Core.IO.StreamExtensions.ReadToEndAsync(System.IO.Stream)">
            <summary>
            Asynchronously reads the entire stream as a byte array.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:PerByte.Core.IO.StreamExtensions.ReadToEndAsync(System.IO.Stream,System.Int32)">
            <summary>
            Asynchronously reads the entire stream as a byte array.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read.</param>
            <param name="bufferSize">The buffer size to use while reading. Defaults to 16KB.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="T:PerByte.Core.Net.WebClient">
            <summary>
            Thin wrapper about <see cref="T:System.Net.WebClient"/> that exposes additional functionality.
            </summary>
        </member>
        <member name="M:PerByte.Core.Net.WebClient.GetWebRequest(System.Uri)">
            <summary>
            Returns a <see cref="T:System.Net.WebRequest"/> object for the specified resource. Overridden to apply certificate to request.
            </summary>
            <param name="address">A <see cref="T:System.Uri"/> that identifies the resource to request.</param>
            <returns>A new <see cref="T:System.Net.WebRequest"/> object for the specified resource.</returns>
        </member>
        <member name="P:PerByte.Core.Net.WebClient.Certificate">
            <summary>
            Gets or sets the certificate to apply to requests made from this component.
            </summary>
        </member>
        <member name="P:PerByte.Core.Net.WebClient.AutomaticDecompression">
            <summary>
            Gets or sets the type of decompression that is used.
            </summary>
        </member>
        <member name="T:PerByte.Core.Reflection.AssemblyExtensions">
            <summary>
            Extension methods for an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Reflection.AssemblyExtensions.GetManifestResourceAsString(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified manifest resource from this assembly as a string.
            </summary>
            <param name="assembly">The assembly to load the resource from.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <returns>The manifest resource as a string.</returns>
        </member>
        <member name="M:PerByte.Core.Reflection.AssemblyExtensions.GetManifestResourceAsString(System.Reflection.Assembly,System.String,System.Text.Encoding)">
            <summary>
            Loads the specified manifest resource from this assembly as a string.
            </summary>
            <param name="assembly">The assembly to load the resource from.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <param name="encoding">The encoding of the resource.</param>
            <returns>The manifest resource as a string.</returns>
        </member>
        <member name="M:PerByte.Core.Reflection.AssemblyExtensions.GetManifestResourceAsByteArray(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified manifest resource from this assembly as a byte array.
            </summary>
            <param name="assembly">The assembly to load the resource from.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <returns>The manifest resource as a byte array.</returns>
        </member>
        <member name="T:PerByte.Core.Security.HashExtensions">
            <summary>
            Extension methods for producing hashes.
            </summary>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.String,PerByte.Core.Security.HashType)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="value">The string to hash.</param>
            <param name="hashType">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.IO.FileInfo,PerByte.Core.Security.HashType)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="file">The file to hash.</param>
            <param name="hashType">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.String,System.Text.Encoding,PerByte.Core.Security.HashType)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="value">The string to hash.</param>
            <param name="encoding">The encoding of the string.</param>
            <param name="hashType">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.Byte[],PerByte.Core.Security.HashType)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="value">The array to hash.</param>
            <param name="hashType">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.Byte[],System.Int32,System.Int32,PerByte.Core.Security.HashType)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="value">The array to hash.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in array to use for data.</param>
            <param name="hashType">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.IO.FileInfo,System.String)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="file">The file to hash.</param>
            <param name="hashName">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.String,System.String)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="value">The string to hash.</param>
            <param name="hashName">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.String,System.Text.Encoding,System.String)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="value">The string to hash.</param>
            <param name="encoding">The encoding of the string.</param>
            <param name="hashName">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.IO.Stream,PerByte.Core.Security.HashType)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="inputStream">The input to compute the hash code for.</param>
            <param name="hashType">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.Byte[],System.String)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="value">The array to hash.</param>
            <param name="hashName">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="value">The array to hash.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in array to use for data.</param>
            <param name="hashName">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.ComputeHash(System.IO.Stream,System.String)">
            <summary>
            Computes the hash of the byte array using the specified hashing algorithm.
            </summary>
            <param name="inputStream">The input to compute the hash code for.</param>
            <param name="hashName">The hash algorithm to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.CreateHashAlgorithm(PerByte.Core.Security.HashType)">
            <summary>
            Creates the appropriate hashing algorithm.
            </summary>
            <param name="hashType">The hashing algorithm to create.</param>
            <returns>The hashing algorithm.</returns>
        </member>
        <member name="M:PerByte.Core.Security.HashExtensions.CreateHashAlgorithm(System.String)">
            <summary>
            Creates the appropriate hashing algorithm.
            </summary>
            <param name="hashName">The hashing algorithm to create.</param>
            <returns>The hashing algorithm.</returns>
        </member>
        <member name="T:PerByte.Core.Security.HashType">
            <summary>
            Hashing algorithms.
            </summary>
        </member>
        <member name="F:PerByte.Core.Security.HashType.MD5">
            <summary>
            The MD5 hashing algorithm.
            </summary>
        </member>
        <member name="F:PerByte.Core.Security.HashType.SHA1">
            <summary>
            The SHA1 hashing algorithm.
            </summary>
        </member>
        <member name="F:PerByte.Core.Security.HashType.SHA256">
            <summary>
            The SHA256 hashing algorithm.
            </summary>
        </member>
        <member name="F:PerByte.Core.Security.HashType.SHA384">
            <summary>
            The SHA384 hashing algorithm.
            </summary>
        </member>
        <member name="F:PerByte.Core.Security.HashType.SHA512">
            <summary>
            The SHA512 hashing algorithm.
            </summary>
        </member>
        <member name="T:PerByte.Core.Security.SecureStringExtensions">
            <summary>
            Extension methods for dealing with <see cref="T:System.Security.SecureString"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Security.SecureStringExtensions.ToSecureString(System.String)">
            <summary>
            Converts an unsecure <see cref="T:System.String"/> to a <see cref="T:System.Security.SecureString"/>
            </summary>
            <param name="this">The <see cref="T:System.String"/> to secure.</param>
            <returns>The secured string.</returns>
        </member>
        <member name="M:PerByte.Core.Security.SecureStringExtensions.ToSecureString(System.String,System.Boolean)">
            <summary>
            Converts an unsecure <see cref="T:System.String"/> to a <see cref="T:System.Security.SecureString"/>
            </summary>
            <param name="this">The <see cref="T:System.String"/> to secure.</param>
            <param name="isReadOnly">Whether to make the <see cref="T:System.Security.SecureString"/> readonly.</param>
            <returns>The secured string.</returns>
        </member>
        <member name="M:PerByte.Core.Security.SecureStringExtensions.ToSystemString(System.Security.SecureString)">
            <summary>
            Converts a <see cref="T:System.Security.SecureString"/> to an unsecure <see cref="T:System.String"/>.
            </summary>
            <param name="this">The <see cref="T:System.Security.SecureString"/> to expose.</param>
            <returns>The unsecure system string.</returns>
        </member>
        <member name="T:PerByte.Core.StringExtensions">
            <summary>
            Extension methods for a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.StringExtensions.TryToDateTime(System.String)">
            <summary>
            Converts a value to <see cref="T:System.DateTime"/> if it can.
            </summary>
            <param name="value">The value to try to convert.</param>
            <returns>The converted value or null if it can't.</returns>
        </member>
        <member name="M:PerByte.Core.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Parses and converts the string into the specified enumeration.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the enumeration.</typeparam>
            <param name="value">The string value to convert.</param>
            <param name="ignoreCase">Whether to ignore the case of the string.</param>
            <returns>The enumerated value that was represented by the string.</returns>
        </member>
        <member name="M:PerByte.Core.StringExtensions.GetValueOrDefault(System.String,System.String)">
            <summary>
            Retrieves the <see cref="T:System.String"/> if it is not null; otherwise, the specified default value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to check.</param>
            <param name="defaultValue">A value to return if the value is null.</param>
            <returns>The <see cref="T:System.String"/> if the value is not null; otherwise, the defaultValue parameter.</returns>
        </member>
        <member name="M:PerByte.Core.StringExtensions.GetValueOrDefault(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the <see cref="T:System.String"/> if it is not null; otherwise, the specified default value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to check.</param>
            <param name="defaultValue">A value to return if the value is null.</param>
            <param name="defaultOnEmpty">Whether to consider an empty string the same as null.</param>
            <returns>The <see cref="T:System.String"/> if the value is not null; otherwise, the defaultValue parameter.</returns>
        </member>
        <member name="M:PerByte.Core.StringExtensions.NullIfEmpty(System.String)">
            <summary>
            Retrieves the <see cref="T:System.String"/> if it is not null or empty; otherwise, null;
            </summary>
            <param name="value">The <see cref="T:System.String"/> to check.</param>
            <returns>The <see cref="T:System.String"/> if the value is not null or empty; otherwise null.</returns>
        </member>
        <member name="M:PerByte.Core.StringExtensions.NullIfEmpty(System.String,System.Boolean)">
            <summary>
            Retrieves the <see cref="T:System.String"/> if it is not null or empty; otherwise, null;
            </summary>
            <param name="value">The <see cref="T:System.String"/> to check.</param>
            <param name="ignoreWhiteSpace">Whether to trim the value before comparing.</param>
            <returns>The <see cref="T:System.String"/> if the value is not null or empty; otherwise null.</returns>
        </member>
        <member name="M:PerByte.Core.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns the left portion of a string. Will return the full value if length specified is longer than the original string.
            </summary>
            <param name="value">The string to use.</param>
            <param name="length">The number of characters to pull.</param>
            <returns>A new string.</returns>
        </member>
        <member name="M:PerByte.Core.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns the right portion of a string. Will return the full value if length specified is longer than the original string.
            </summary>
            <param name="value">The string to use.</param>
            <param name="length">The number of characters to pull.</param>
            <returns>A new string.</returns>
        </member>
        <member name="M:PerByte.Core.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Repeats a string a certain number of times.
            </summary>
            <param name="value">The string to repeat.</param>
            <param name="count">The number of times to repeat.</param>
            <returns>A string with the input repeated.</returns>
        </member>
        <member name="M:PerByte.Core.StringExtensions.Repeat(System.Char,System.Int32)">
            <summary>
            Repeats a character a certain number of times.
            </summary>
            <param name="value">The character to repeat.</param>
            <param name="count">The number of times to repeat.</param>
            <returns>A string with the character repeated.</returns>
        </member>
        <member name="T:PerByte.Core.Text.PronounceablePasswordGenerator">
            <summary>
            Generates passwords that are pronounceable.
            </summary>
        </member>
        <member name="F:PerByte.Core.Text.PronounceablePasswordGenerator.Alphabet">
            <summary>
            Alphabet as a string. 
            </summary>
        </member>
        <member name="F:PerByte.Core.Text.PronounceablePasswordGenerator.Sigma">
            <summary>
            Sum of the frequencies.
            </summary>
        </member>
        <member name="F:PerByte.Core.Text.PronounceablePasswordGenerator.Data">
            <summary>
            A 26x26x26 cube of three letter character relationships for generating pronounceable passwords.
            </summary>
        </member>
        <member name="F:PerByte.Core.Text.PronounceablePasswordGenerator.random">
            <summary>
            Local storage for a random number generator.
            </summary>
        </member>
        <member name="M:PerByte.Core.Text.PronounceablePasswordGenerator.Generate(System.Int32)">
            <summary>
            Generates a pronounceable password.
            </summary>
            <param name="minimumPasswordLength">The minimum character length of the password.</param>
            <returns>The password.</returns>
        </member>
        <member name="T:PerByte.Core.Text.StringBuilderExtensions">
            <summary>
            Extension methods for a <see cref="T:System.Text.StringBuilder"/>.
            </summary> 
        </member>
        <member name="M:PerByte.Core.Text.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Appends a formatted string and the default line terminator, which contains zero or more format specifications, to this instance.  Each format specification is replaced by the string representation of a corresponding object argument.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> instance to append text to.</param>
            <param name="format">A string containing zero or more format specifications.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to this instance with format appended.  Any format specifications in format is replaced by the string representation of the corresponding object argument.</returns>
        </member>
        <member name="M:PerByte.Core.Text.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends a formatted string and the default line terminator, which contains zero or more format specifications, to this instance.  Each format specification is replaced by the string representation of a corresponding object argument.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> instance to append text to.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> that determines the way formatting specifications in format are interpreted.</param>
            <param name="format">A string containing zero or more format specifications.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to this instance with format appended.  Any format specifications in format is replaced by the string representation of the corresponding object argument.</returns>
        </member>
        <member name="T:PerByte.Core.Tuple">
            <summary>
            Factory class for this incredibly simple Tuple library. A full Tuple library is part of .NET 4, use that if you're on it.
            </summary>
        </member>
        <member name="M:PerByte.Core.Tuple.Create``1(``0)">
            <summary>
            Create a one item tuple.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <param name="item1">The first item.</param>
            <returns>The Tuple.</returns>
        </member>
        <member name="M:PerByte.Core.Tuple.Create``2(``0,``1)">
            <summary>
            Create a two item tuple.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <param name="item1">The first item.</param>
            <typeparam name="T2">The type of the second item.</typeparam>
            <param name="item2">The second item.</param>
            <returns>The Tuple.</returns>
        </member>
        <member name="M:PerByte.Core.Tuple.Create``3(``0,``1,``2)">
            <summary>
            Create a three item tuple.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <param name="item1">The first item.</param>
            <typeparam name="T2">The type of the second item.</typeparam>
            <param name="item2">The second item.</param>
            <typeparam name="T3">The type of the third item.</typeparam>
            <param name="item3">The third item.</param>
            <returns>The Tuple.</returns>
        </member>
        <member name="M:PerByte.Core.Tuple.Create``4(``0,``1,``2,``3)">
            <summary>
            Create a four item tuple.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <param name="item1">The first item.</param>
            <typeparam name="T2">The type of the second item.</typeparam>
            <param name="item2">The second item.</param>
            <typeparam name="T3">The type of the third item.</typeparam>
            <param name="item3">The third item.</param>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <param name="item4">The fourth item.</param>
            <returns>The Tuple.</returns>
        </member>
        <member name="M:PerByte.Core.Tuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Create a five item tuple.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <param name="item1">The first item.</param>
            <typeparam name="T2">The type of the second item.</typeparam>
            <param name="item2">The second item.</param>
            <typeparam name="T3">The type of the third item.</typeparam>
            <param name="item3">The third item.</param>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <param name="item4">The fourth item.</param>
            <typeparam name="T5">The type of the fifth item.</typeparam>
            <param name="item5">The fifth item.</param>
            <returns>The Tuple.</returns>
        </member>
        <member name="T:PerByte.Core.Tuple`5">
            <summary>
            A three item Tuple class.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <typeparam name="T5">The type of the fifth item.</typeparam>
        </member>
        <member name="M:PerByte.Core.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the Tuple class.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <param name="item3">The third item.</param>
            <param name="item4">The fourth item.</param>
            <param name="item5">The fifth item.</param>
        </member>
        <member name="P:PerByte.Core.Tuple`5.Item1">
            <summary>
            Gets the first item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`5.Item2">
            <summary>
            Gets the second item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`5.Item3">
            <summary>
            Gets the third item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`5.Item4">
            <summary>
            Gets the fourth item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`5.Item5">
            <summary>
            Gets the fourth item.
            </summary>
        </member>
        <member name="T:PerByte.Core.Tuple`4">
            <summary>
            A three item Tuple class.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
        </member>
        <member name="M:PerByte.Core.Tuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the Tuple class.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <param name="item3">The third item.</param>
            <param name="item4">The fourth item.</param>
        </member>
        <member name="P:PerByte.Core.Tuple`4.Item1">
            <summary>
            Gets the first item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`4.Item2">
            <summary>
            Gets the second item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`4.Item3">
            <summary>
            Gets the third item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`4.Item4">
            <summary>
            Gets the fourth item.
            </summary>
        </member>
        <member name="T:PerByte.Core.Tuple`3">
            <summary>
            A three item Tuple class.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
        </member>
        <member name="M:PerByte.Core.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the Tuple class.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <param name="item3">The third item.</param>
        </member>
        <member name="P:PerByte.Core.Tuple`3.Item1">
            <summary>
            Gets the first item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`3.Item2">
            <summary>
            Gets the second item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`3.Item3">
            <summary>
            Gets the third item.
            </summary>
        </member>
        <member name="T:PerByte.Core.Tuple`2">
            <summary>
            A two item Tuple class.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
        </member>
        <member name="M:PerByte.Core.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Tuple class.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
        </member>
        <member name="P:PerByte.Core.Tuple`2.Item1">
            <summary>
            Gets the first item.
            </summary>
        </member>
        <member name="P:PerByte.Core.Tuple`2.Item2">
            <summary>
            Gets the second item.
            </summary>
        </member>
        <member name="T:PerByte.Core.Tuple`1">
            <summary>
            A one item Tuple class.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
        </member>
        <member name="M:PerByte.Core.Tuple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the Tuple class.
            </summary>
            <param name="item1">The first item.</param>
        </member>
        <member name="P:PerByte.Core.Tuple`1.Item1">
            <summary>
            Gets the first item.
            </summary>
        </member>
        <member name="T:PerByte.Core.Xml.XElementCollectionFacade`1">
            <summary>
            Provides strongly typed <see cref="T:System.Collections.Generic.IList`1"/> interface over child elements of an XML document.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="F:PerByte.Core.Xml.XElementCollectionFacade`1.container">
            <summary>
            Local storage for the parent <see cref="T:System.Xml.Linq.XContainer"/>.
            </summary>
        </member>
        <member name="F:PerByte.Core.Xml.XElementCollectionFacade`1.convertToFunc">
            <summary>
            Local storage for the translation function to convert the POCO into an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="F:PerByte.Core.Xml.XElementCollectionFacade`1.convertFromFunc">
            <summary>
            Local storage for the translation function to convert the <see cref="T:System.Xml.Linq.XElement"/> into the POCO.
            </summary>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.#ctor(System.Xml.Linq.XContainer,System.Func{System.Xml.Linq.XElement,`0},System.Func{`0,System.Xml.Linq.XElement})">
            <summary>
            Initializes a new instance of the <see cref="T:PerByte.Core.Xml.XElementCollectionFacade`1"/> class.
            </summary>
            <param name="container">The direct parent container of the nodes.</param>
            <param name="convertToFunc">Function to translate from T to <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="convertFromFunc">Function to translate from <see cref="T:System.Xml.Linq.XElement"/> to T.</param>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.Add(`0)">
            <summary>
            Adds the item to the end of the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The index at which to import.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.Clear">
            <summary>
            Remove all of the children of the <see cref="T:System.Xml.Linq.XContainer"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.Contains(`0)">
            <summary>
            Determines whether the item is one of the children of the <see cref="T:System.Xml.Linq.XContainer"/>.
            </summary>
            <param name="item">The item to find.</param>
            <returns>true if found; false otherwise.</returns>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the collection. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <i>array</i> at which copying begins.</param>
        </member>
        <member name="M:PerByte.Core.Xml.XElementCollectionFacade`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the collection.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>The zero-based index of the first occurrence of <i>item</i> within the collection, if found; otherwise -1.</returns>
        </member>
        <member name="P:PerByte.Core.Xml.XElementCollectionFacade`1.Count">
            <summary>
            Gets the number of child elements of the <see cref="T:System.Xml.Linq.XContainer"/>.
            </summary>
        </member>
        <member name="P:PerByte.Core.Xml.XElementCollectionFacade`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is readonly. Always returns false.
            </summary>
        </member>
        <member name="P:PerByte.Core.Xml.XElementCollectionFacade`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:PerByte.Core.Xml.XElementExtensions">
            <summary>
            Extension methods for an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="M:PerByte.Core.Xml.XElementExtensions.ElementsAsList``1(System.Xml.Linq.XContainer,System.Func{System.Xml.Linq.XElement,``0},System.Func{``0,System.Xml.Linq.XElement})">
            <summary>
            Returns an interactive strongly typed &gt;wrapper for child elements. Changes to the list are reflected immediately in the <see cref="T:System.Xml.Linq.XContainer"/>.
            </summary>
            <typeparam name="T">The type of the type used to represent an element.</typeparam>
            <param name="container">The parent container of the elements.</param>
            <param name="convertToFunc">Function to translate from <see cref="T:System.Xml.Linq.XElement"/> to T.</param>
            <param name="convertFromFunc">Function to translate from T to <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>The strongly typed wrapper.</returns>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
    </members>
</doc>
